#!/bin/sh
#
# Print the lines that are in the first input, not other inputs.
#
# Syntax:
#
#     except <input> ...
#
# Examples:
#
#     except a.txt b.txt
#     => lines that are in a.txt, not b.txt
#
#     except a.txt b.txt c.txt
#     => lines that are in a.txt, not b.txt, not c.txt.
#
# ## Specifics
#
# The order does not matter.
#
# ## Related
#
# These commands are related:
#
#   * `union`: print lines in (A union B)
#   * `intersect`: print lines in (A intersect B)
#   * `except`: print lines in (A except B) a.k.a. (A - B)
#   * `extra` : print lines in (A extra B) a.k.a. (B - A)
#
# ## Notes
#
# In set theory, this is (A except B) a.k.a. (A - B).
#
# This command aims to be fast, not to sort.
#
# This command is currently implemented using `awk`.
#
# ## Tracking
#
# Program: except
# Version: 2.0.0
# Created: 2017-01-30
# Updated: 2017-01-30
# License: GPL
# Contact: Joel Parker Henderson (joel@joelparkerhenderson.com)
##
set -eu
awk 'NR==FNR{seen[$0]=1;next} seen[$0]=0; END { for (key in seen) { if (seen[key]) { print key } } }' "$@"
