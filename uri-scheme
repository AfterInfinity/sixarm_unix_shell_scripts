#!/bin/bash

##
# uri-scheme
#
# Output the URI scheme parts.

# Syntax:
#
#    <url> | url-scheme
#
# See http://en.wikipedia.org/wiki/URI_scheme
#
# Examples:
#
#   * uri: "http://user:pass@www.example.com:80/a/b/c.html?d=e&f=g#hi"
#   * scheme: "http"
#   * hierarchical: "//user:pass@www.example.com:80/a/b/c.html?d=e&f=g#hi"
#     * authority: "user:pass@www.example.com:80"
#       * userinfo: "user:pass"
#       * host: "www.example.com"
#       * port: "80"#
#   * query: "d=e&f=g"
#   * fragment: "hi"
#
# Example:
#
#    $ echo "http://user:pass@www.example.com:80/a/b/c.html?d=e&f=g#hi" | url-scheme
#    uri: http://user:pass@www.example.com:80/a/b/c?d=e#fg
#    scheme: http
#    hierarchical: //user:pass@www.example.com:80/a/b/c
#    query: d=e
#    fragment: fg
#    authority: user:pass@www.example.com:80
#    userinfo: user:pass
#    host: www.example.com
#    port: 80
#    path: /a/b/c
#
# Caution: this current implementation is sufficient for our internal needs;
# it is loosely accurate for typical URIs, but is not standards-compliant.
#
# Important: if you change this script, be sure to change the related
# scripts in this repo, i.e. all the scripts named `url-scheme-*`.
#
# TODO: improve parsing; improve standards; improve speed.
#
##

read uri
echo "uri: $uri"

read scheme hierarchical query fragment < <(echo "$uri" | sed -n -E 's~^(([[:alpha:]][[:alnum:]\+\.\-]*):)([^\?\#]*)(\?([^#]*))?(#(.*?))?$~\2 \3 \5 \7~p')
echo "scheme: $scheme"
echo "hierarchical: $hierarchical"
echo "query: $query"
echo "fragment: $fragment"

if [[ "$hierarchical" =~ ^// ]]; then
  read authority path < <(echo "$hierarchical" | sed -n -E 's~^(//)?([^/]*)~\2 ~p')
  read userinfo host_and_port < <(echo "$authority" | sed -n -E 's~^(.+)@~\1 ~p')
  read host port < <(echo "$host_and_port" | sed -n -E 's~^([^:]*)(:(.*))?~\1 \3~p')
else
  path="${hierarchical#//}"
fi

echo "authority: $authority"
echo "userinfo: $userinfo"
echo "host: $host"
echo "port: $port"
echo "path: $path"
