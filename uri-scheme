#!/bin/bash
set -euf -o pipefail
out () { printf %s\\n "$*" ; }

##
# uri-scheme
#
# Output the URI scheme parts.
#
# Syntax:
#
#    <uri> | uri-scheme [selector] ...
#
# Example:
#
#   $ echo "http://www.example.com:80" | uri-scheme
#   name: http
#   authority: www.example.com:80
#   host: www.example.com
#   port: 80
#
# Example with one selector:
#
#   $ echo "http://www.example.com:80" | uri-scheme host
#   www.example.com
#
# Example with multiple selectors:
#
#   $ echo "http://www.example.com:80" | uri-scheme port host
#   80 www.example.com
#
# See http://en.wikipedia.org/wiki/URI_scheme
#
# Scheme parts:
#
#   * uri: "http://@www.example.com:80/a/b/c.html?d=e&f=g#hi"
#   * name: "http"
#   * hierarchical: "//user:pass@www.example.com:80/a/b/c.html?d=e&f=g#hi"
#     * authority: "user:pass@www.example.com:80"
#       * userinfo: "user:pass"
#         * username: "user"
#         * password: "secret"
#       * host: "www.example.com"
#       * port: "80"
#     * path: "/a/b/c.html"
#       * file: "c.html"
#   * query: "d=e&f=g"
#   * fragment: "hi"
#
# Example:
#
#    $ echo "http://user:pass@www.example.com:80/a/b/c.html?d=e&f=g#hi" | uri-scheme
#    uri: http://user:pass@www.example.com:80/a/b/c?d=e#fg
#    scheme: http
#    hierarchical: //user:pass@www.example.com:80/a/b/c
#    query: d=e
#    fragment: fg
#    authority: user:pass@www.example.com:80
#    userinfo: user:pass
#    host: www.example.com
#    port: 80
#    path: /a/b/c
#
# Caution: this current implementation is sufficient for our internal needs;
# it is generally accurate for typical URIs, but is not standards-compliant.
#
# TODO: improve parsing; improve standards; improve speed.
#
##

read uri
out "uri:$uri"

read name hierarchical query fragment < <(out "$uri" | sed -n -E 's~^(([[:alpha:]][[:alnum:]\.\+\-]*):)([^\?\#]*)(\?([^#]*))?(#(.*?))?$~\2 \3 \5 \7~p')
out "name:$name"
out "hierarchical:$hierarchical"

if [[ "$hierarchical" =~ ^// ]]; then
  read authority path < <(out "$hierarchical" | sed -n -E 's~^(//)?([^/]*)~\2 ~p')
else
  path="${hierarchical#//}"
fi

if [ -n "${authority:-}" ]; then
    userinfo=$(out "$authority" | sed -n -E 's~^(.+)@.*$~\1~p')
    host=$(out "$authority" | sed -n -E 's~^(.*@)?([^:]*)(:.*)?$~\2~p')
    port=$(out "$authority" | sed -n -E 's~.*:([[:digit:]]+)$~\1~p')
fi

if [ -n "${userinfo:-}" ]; then
    read username password < <(out "$userinfo" | sed -n -E 's~^(.*):(.*)~\1 \2~p')
fi

if [ -n "${path:-}" ]; then
    read file < <(out "$path" | sed -n -E 's~^(.*/)(.*)$~\2~p')
fi

if [ $# -eq 0 ]; then
    if [ -n "${uri:-}" ]; then out "uri: $uri"; fi
    if [ -n "${name:-}" ]; then out "name: $name"; fi
    if [ -n "${hierarchical:-}" ]; then out "hierarchical: $hierarchical"; fi
    if [ -n "${authority:-}" ]; then out "authority: $authority"; fi
    if [ -n "${userinfo:-}" ]; then out "userinfo: $userinfo"; fi
    if [ -n "${username:-}" ]; then out "username: $username"; fi
    if [ -n "${password:-}" ]; then out "password: $password"; fi
    if [ -n "${host:-}" ]; then out "host: $host"; fi
    if [ -n "${port:-}" ]; then out "port: <$port>"; fi
    if [ -n "${path:-}" ]; then out "path: $path"; fi
    if [ -n "${file:-}" ]; then out "file: $file"; fi
    if [ -n "${query:-}" ]; then out "query: $query"; fi
    if [ -n "${fragment:-}" ]; then out "fragment: $fragment"; fi
else
    s=""
    for selector in "$@"; do
        case "$selector" in
            uri )
                s="$s $uri"
                ;;
            name )
                s="$s $name"
                ;;
            hierarchical )
                s="$s $hierarchical"
                ;;
            authority )
                s="$s $authority"
                ;;
            userinfo )
                s="$s $userinfo"
                ;;
            username )
                s="$s $username"
                ;;
            password )
                s="$s $password"
                ;;
            host )
                s="$s $host"
                ;;
            port )
                s="$s $port"
                ;;
            path )
                s="$s $path"
                ;;
            file )
                s="$s $file"
                ;;
            query )
                s="$s $query"
                ;;
            fragment )
                s="$s $fragment"
                ;;
        esac
    done
    out "${s# }"
fi
